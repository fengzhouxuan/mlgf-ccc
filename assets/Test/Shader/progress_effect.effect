// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        progressColor:  { value: [1, 1, 1, 1], editor: {type: color} }
        progress: {value: 0.5}
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision lowp float;
#include <legacy/input-standard>
#include <builtin/uniforms/cc-global>
#include <legacy/local-batch>
#include <legacy/input-standard>
#include <legacy/fog-vs>
#include <legacy/shadow-map-vs>

#if USE_INSTANCING // when instancing is enabled
  #pragma format(RGBA8) // normalized unsigned byte
  in vec4 instance_progressColor;
  in float instance_progress;
#endif

in vec4 a_color;
#if HAS_SECOND_UV
  in vec2 a_texCoord1;
#endif

  #if USE_INSTANCING
    out vec4 instancedProgressColor;
    out float instancedProgress;
  #endif

out vec3 v_position;
out vec3 v_normal;
out vec3 v_tangent;
out vec3 v_bitangent;
out vec2 v_uv;
out vec2 v_uv1;
out vec4 v_color;

vec4 vert () {
  StandardVertInput In;
  CCVertInput(In);

  mat4 matWorld, matWorldIT;
  CCGetWorldMatrixFull(matWorld, matWorldIT);

  vec4 pos = matWorld * In.position;

  v_position = pos.xyz;
  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
  v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
  v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

  v_uv = a_texCoord;
  #if HAS_SECOND_UV
    v_uv1 = a_texCoord1;
  #endif
  v_color = a_color;

   #if USE_INSTANCING
        instancedProgressColor = instance_progressColor;
        instancedProgress = instance_progress;
   #endif
  CC_TRANSFER_FOG(pos);
  CC_TRANSFER_SHADOW(pos);

  return cc_matProj * (cc_matView * matWorld) * In.position;
}
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

   #if USE_INSTANCING
    in vec4 instancedProgressColor;
    in float instancedProgress;
  #endif

  in vec2 v_uv;
  in vec3 v_position;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 progressColor;
    vec4 mainColor;
    float progress;
  };

  vec4 frag () {
    vec4 col = mainColor * texture(mainTexture, v_uv);
    vec4 finalColor = vec4(1,1,1,1);
    vec4 proColor = progressColor;
    float progressValue = progress;
    #if USE_INSTANCING
      // proColor = instancedProgressColor;
      progressValue = instancedProgress;
    #endif
    float isUpper = step(v_uv.y,1.0-progressValue);
    finalColor = mix(col,proColor,isUpper);
    CC_APPLY_FOG(finalColor, v_position);
    return CCFragOutput(finalColor);
  }
}%
